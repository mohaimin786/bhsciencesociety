{"fullName":"Mohammad Mohaimin","email":"mohaiminbaseer@gmail.com","countryCode":"+92","phone":"+923005902060","dob":"08/13/2025","grade":"9th","isBhStudent":true,"bhBranch":null,"section":"Keats","city":null,"school":null,"country":null,"subjects":["Physics"],"category":null,"motivation":"KeatsKeatsKeatsKeatsKeatsKeatsKeatsKeatsKeatsKeats","whyChosenSubjects":null,"heardAbout":null,"social":null,"prevCompetitions":null,"skills":null,"ideas":null,"status":"pending","timestamp":{"$$date":1754441902608},"_id":"Y89tIhuGFTjo13O5"}
{"fullName":"Mohammad Mohaimin","email":"mohaiminbaseer@gmail.com","countryCode":"+92","phone":"+923005902060","dob":"08/11/2025","grade":"9th","isBhStudent":true,"bhBranch":null,"section":"Keats","city":null,"school":null,"country":null,"subjects":["Physics"],"category":null,"motivation":"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee","whyChosenSubjects":null,"heardAbout":null,"social":null,"prevCompetitions":null,"skills":null,"ideas":null,"status":"pending","timestamp":{"$$date":1754436774075},"_id":"gQZXIGhCaKy9QqNc"}
{"fullName":"Mohammad Mohaimin","email":"mohaiminbaseer@gmail.com","countryCode":"+92","phone":"+923005902060","dob":"08/14/2025","grade":"9th","isBhStudent":true,"bhBranch":null,"section":"Keats","city":null,"school":null,"country":null,"subjects":["Physics"],"category":null,"motivation":"const express = require('express');\nconst Datastore = require('nedb');\nconst path = require('path');\nconst session = require('express-session');\nconst bcrypt = require('bcryptjs');\nconst crypto = require('crypto');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst fetch = require('node-fetch');\n\nconst app = express();\nconst db = new Datastore({ filename: 'submissions.db', autoload: true });\n\nconst secretKey =\n  process.env.SESSION_SECRET || crypto.randomBytes(32).toString('hex');\n\napp.use(\n  session({\n    secret: secretKey,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n    },\n  })\n);\n\napp.set('trust proxy', true);\n\napp.use(helmet());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(express.static('public'));\n\napp.use(function (req, res, next) {\n  res.header(\n    'Access-Control-Allow-Origin',\n    'https://stackblitzstartersuogm5vlf-qlly--3000--b5a27d10.local-credentialless.webcontainer.io/'\n  );\n  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  next();\n});\n\nconst loginLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 10,\n  message: 'Too many login attempts, please try again later',\n});\n\nconst submissionLimiter = rateLimit({\n  windowMs: 24 * 60 * 60 * 1000,\n  max: 3,\n  message:\n    'You have reached the maximum number of submissions allowed per day (3). Please try again tomorrow.',\n  keyGenerator: function (req) {\n    var forwarded = req.headers['x-forwarded-for'];\n    if (forwarded) {\n      var ips = forwarded.split(',');\n      return ips[0].trim();\n    }\n    return req.connection.remoteAddress;\n  },\n  handler: function (req, res) {\n    console.log(\n      'Rate limit exceeded for IP:',\n      req.headers['x-forwarded-for'] || req.ip\n    );\n    res.status(429).json({\n      success: false,\n      error:\n        'You have reached the maximum number of submissions allowed per day (3). Please try again tomorrow.',\n    });\n  },\n  skip: function (req, res) {\n    return req.session.authenticated;\n  },\n  onLimitReached: function (req) {\n    console.log(\n      'Rate limit reached for',\n      req.headers['x-forwarded-for'] || req.ip,\n      'at',\n      new Date()\n    );\n  },\n});\n\nconst ipinfoLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000,\n  max: 100,\n  message: 'Too many IP info requests, please try again later',\n});\n\napp.get('/api/ipinfo', ipinfoLimiter, async (req, res) => {\n  try {\n    const forwardedHeader = req.headers['x-forwarded-for'];\n    const clientIp = forwardedHeader\n      ? forwardedHeader.split(',')[0].trim()\n      : req.ip;\n\n    const apiKey = process.env.IPAPI_KEY || '';\n    const ipapiUrl = apiKey\n      ? `https://ipapi.co/${clientIp}/json/?key=${apiKey}`\n      : 'https://ipapi.co/json/';\n    const fallbackUrl = 'https://ipwhois.app/json/';\n\n    console.log('Fetching IP data from:', ipapiUrl);\n\n    let response = await fetch(ipapiUrl);\n\n    if (!response.ok) {\n      console.warn('ipapi failed with status:', response.status);\n      response = await fetch(fallbackUrl);\n    }\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('All IP APIs failed:', errorText);\n      throw new Error('Both IP API services failed');\n    }\n\n    const data = await response.json();\n\n    res.json({\n      country: data.country || data.country_name,\n      countryCode: data.country_code,\n      ip: data.ip,\n    });\n  } catch (error) {\n    console.error('IP detection error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Could not detect location',\n      fallback: true,\n    });\n  }\n});\n\napp.use(function (req, res, next) {\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.setHeader('X-Frame-Options', 'DENY');\n  res.setHeader('X-XSS-Protection', '1; mode=block');\n  next();\n});\n\nconst ADMIN_CREDENTIALS = {\n  username: process.env.ADMIN_USER || 'BHSS_COUNCIL',\n  password: process.env.ADMIN_PASS\n    ? bcrypt.hashSync(process.env.ADMIN_PASS, 10)\n    : bcrypt.hashSync('temporary1234', 10),\n};\n\nfunction requireAuth(req, res, next) {\n  if (req.session.authenticated) {\n    return next();\n  }\n  res.status(403).json({ error: 'Authentication required' });\n}\n\napp.post('/api/admin/login', loginLimiter, express.json(), function (req, res) {\n  var username = req.body.username;\n  var password = req.body.password;\n\n  if (\n    username === ADMIN_CREDENTIALS.username &&\n    bcrypt.compareSync(password, ADMIN_CREDENTIALS.password)\n  ) {\n    req.session.authenticated = true;\n    req.session.user = { username: username };\n    return res.json({ success: true });\n  }\n\n  res.status(401).json({ success: false, error: 'Invalid credentials' });\n});\n\napp.post('/api/admin/logout', function (req, res) {\n  req.session.destroy(function (err) {\n    if (err) {\n      console.error('Session destruction error:', err);\n    }\n    res.json({ success: true });\n  });\n});\n\napp.get('/api/admin/status', function (req, res) {\n  res.json({ authenticated: !!req.session.authenticated });\n});\n\napp.get('/api/rate-test', submissionLimiter, function (req, res) {\n  res.json({\n    success: true,\n    message: 'Rate test passed',\n    ip: req.ip,\n    forwardedFor: req.headers['x-forwarded-for'],\n  });\n});\n\napp.get('/api/submissions/export-filtered', requireAuth, function (req, res) {\n  db.find({})\n    .sort({ timestamp: -1 })\n    .exec(function (err, docs) {\n      if (err) {\n        console.error('Export error:', err);\n        return res.status(500).json({ success: false, error: 'Export failed' });\n      }\n\n      // CSV header row with only the required fields\n      let csv = 'Full Name,Email,Country Code,Phone Number,Date of Birth,Grade,Is BH Student,Country,School Name,Subjects,Motivation\\n';\n\n      docs.forEach(function (sub) {\n        // Format each field with proper escaping\n        const escapeCsv = (str) => {\n          if (!str) return '';\n          return `\"${String(str).replace(/\"/g, '\"\"')}\"`;\n        };\n\n        // Format subjects array\n        const subjects = sub.subjects ? sub.subjects.join('; ') : '';\n\n        // Build the CSV row\n        csv += [\n          escapeCsv(sub.fullName),\n          escapeCsv(sub.email),\n          escapeCsv(sub.countryCode),\n          escapeCsv(sub.phone),\n          escapeCsv(sub.dob),\n          escapeCsv(sub.grade),\n          escapeCsv(sub.isBhStudent ? 'Yes' : 'No'),\n          escapeCsv(sub.country),\n          escapeCsv(sub.school),\n          escapeCsv(subjects),\n          escapeCsv(sub.motivation)\n        ].join(',') + '\\n';\n      });\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=filtered-submissions-' +\n          new Date().toISOString().slice(0, 10) +\n          '.csv'\n      );\n      res.send(csv);\n    });\n});\n\napp.delete('/api/submissions/bulk-delete', requireAuth, express.json(), (req, res) => {\n  try {\n    const { ids } = req.body;\n\n    // Validate input\n    if (!ids || !Array.isArray(ids)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'IDs must be provided as an array' \n      });\n    }\n\n    // Convert all IDs to strings and filter empty ones\n    const validIds = ids.map(id => String(id)).filter(id => id.trim().length > 0);\n\n    if (validIds.length === 0) {\n      return res.status(400).json({ \n        success: false, \n        error: 'No valid IDs provided' \n      });\n    }\n\n    // Perform deletion\n    db.remove({ _id: { $in: validIds } }, { multi: true }, (err, numRemoved) => {\n      if (err) {\n        console.error('Database error:', err);\n        return res.status(500).json({ \n          success: false, \n          error: 'Database operation failed' \n        });\n      }\n\n      res.json({ \n        success: true, \n        deleted: numRemoved,\n        message: `Deleted ${numRemoved} submissions`\n      });\n    });\n  } catch (err) {\n    console.error('Server error:', err);\n    res.status(500).json({ \n      success: false, \n      error: 'Internal server error' \n    });\n  }\n});\n\n\napp.put('/api/submissions/bulk-update', requireAuth, function (req, res) {\n  var ids = req.body.ids;\n  var status = req.body.status;\n\n  if (!ids || !Array.isArray(ids)) {\n    return res\n      .status(400)\n      .json({ success: false, error: 'Invalid submission IDs' });\n  }\n\n  if (!['pending', 'approved', 'rejected'].includes(status)) {\n    return res.status(400).json({ success: false, error: 'Invalid status' });\n  }\n\n  db.update(\n    { _id: { $in: ids } },\n    { $set: { status: status } },\n    { multi: true },\n    function (err, numUpdated) {\n      if (err) {\n        return res\n          .status(500)\n          .json({ success: false, error: 'Database error' });\n      }\n      res.json({ success: true, updated: numUpdated });\n    }\n  );\n});\n\napp.put('/api/submissions/:id', requireAuth, function (req, res) {\n  db.update(\n    { _id: req.params.id },\n    {\n      $set: {\n        status: req.body.status,\n        notes: req.body.notes || '',\n      },\n    },\n    {},\n    function (err, numReplaced) {\n      if (err)\n        return res\n          .status(500)\n          .json({ success: false, error: 'Database error' });\n      res.json({ success: true, updated: numReplaced });\n    }\n  );\n});\n\n// Single delete endpoint\napp.delete('/api/submissions/:id', requireAuth, (req, res) => {\n  const id = req.params.id;\n  \n  db.remove({ _id: id }, {}, (err, numRemoved) => {\n    if (err) {\n      console.error('Delete error:', err);\n      return res.status(500).json({ \n        success: false, \n        error: 'Database error' \n      });\n    }\n    \n    if (numRemoved === 0) {\n      return res.status(404).json({ \n        success: false, \n        error: 'Submission not found' \n      });\n    }\n    \n    res.json({ \n      success: true,\n      deleted: numRemoved\n    });\n  });\n});\n\n// Single status update endpoint\napp.put('/api/submissions/:id', requireAuth, express.json(), (req, res) => {\n  const id = req.params.id;\n  const { status } = req.body;\n  \n  if (!['pending', 'approved', 'rejected'].includes(status)) {\n    return res.status(400).json({ \n      success: false, \n      error: 'Invalid status' \n    });\n  }\n  \n  db.update(\n    { _id: id },\n    { $set: { status } },\n    {},\n    (err, numReplaced) => {\n      if (err) {\n        return res.status(500).json({ \n          success: false, \n          error: 'Database error' \n        });\n      }\n      \n      res.json({ \n        success: true,\n        updated: numReplaced\n      });\n    }\n  );\n});\n\napp.post('/api/submit', submissionLimiter, express.json(), function (req, res) {\n  if (\n    !req.body.fullName ||\n    !req.body.email ||\n    !req.body.phone ||\n    !req.body.dob ||\n    !req.body.grade ||\n    !req.body.isBhStudent\n  ) {\n    return res\n      .status(400)\n      .json({ success: false, error: 'All required fields must be filled' });\n  }\n\n  if (!req.body.subjects || req.body.subjects.length === 0) {\n    return res\n      .status(400)\n      .json({ success: false, error: 'Please select at least one subject' });\n  }\n\n  if (!req.body.motivation || req.body.motivation.length < 50) {\n    return res\n      .status(400)\n      .json({\n        success: false,\n        error: 'Motivation must be at least 50 characters long',\n      });\n  }\n\n  if (req.body.isBhStudent === 'yes' && !req.body.section) {\n    return res\n      .status(400)\n      .json({ success: false, error: 'Section is required for BH students' });\n  }\n\n  if (\n    req.body.isBhStudent === 'no' &&\n    (!req.body.country || !req.body.school)\n  ) {\n    return res\n      .status(400)\n      .json({\n        success: false,\n        error: 'Country and School are required for non-BH students',\n      });\n  }\n\n  var submission = {\n    fullName: req.body.fullName,\n    email: req.body.email,\n    countryCode: req.body.countryCode,\n    phone: req.body.phone,\n    dob: req.body.dob,\n    grade: req.body.grade,\n    isBhStudent: req.body.isBhStudent === 'yes',\n    bhBranch: req.body.bhBranch || null,\n    section: req.body.section || null,\n    city: req.body.city || null,\n    school: req.body.school || null,\n    country: req.body.country || null,\n    subjects: req.body.subjects,\n    category: req.body.category || null,\n    motivation: req.body.motivation,\n    whyChosenSubjects: req.body.whyChosenSubjects || null,\n    heardAbout: req.body.heardAbout || null,\n    social: req.body.social || null,\n    prevCompetitions: req.body.prevCompetitions || null,\n    skills: req.body.skills || null,\n    ideas: req.body.ideas || null,\n    status: 'pending',\n    timestamp: new Date(),\n  };\n\n  db.insert(submission, function (err, doc) {\n    if (err)\n      return res.status(500).json({ success: false, error: 'Database error' });\n    console.log(\n      'New submission from IP:',\n      submission.ipAddress,\n      'at',\n      new Date()\n    );\n    res.json({ success: true, id: doc._id });\n  });\n});\n\napp.get('/api/submissions', requireAuth, function (req, res) {\n  db.find({})\n    .sort({ timestamp: -1 })\n    .exec(function (err, docs) {\n      if (err) return res.status(500).json({ error: 'Database error' });\n      res.json({ success: true, data: docs });\n    });\n});\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\napp.get('/register', function (req, res) {\n  res.sendFile(path.join(__dirname, 'public', 'register.html'));\n});\n\napp.get('/admin', function (req, res) {\n  if (!req.session.authenticated) {\n    return res.redirect('/admin-login');\n  }\n  res.sendFile(path.join(__dirname, 'public', 'admin.html'));\n});\n\napp.get('/admin-login', function (req, res) {\n  res.sendFile(path.join(__dirname, 'public', 'admin-login.html'));\n});\n\nvar PORT = process.env.PORT || 3000;\napp.listen(PORT, function () {\n  console.log('Server running on port', PORT);\n  console.log('Rate limiting configured for 3 submissions per IP per 24 hours');\n});\n","whyChosenSubjects":null,"heardAbout":null,"social":null,"prevCompetitions":null,"skills":null,"ideas":null,"status":"pending","timestamp":{"$$date":1754442177986},"_id":"qOFnOyxKCj8fyca7"}
